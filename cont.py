import streamlit as st
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import io
import json
import hashlib
import datetime
import time

# --- KOD BAÅžLANGICI: YARDIMCI FONKSÄ°YONLAR ---

def initialize_session_state():
    """Streamlit oturum durumunu baÅŸlatÄ±r veya sÄ±fÄ±rlar."""
    state_keys = [
        'decrypted_image', 'watermarked_image', 'hidden_message', 
        'is_message_visible', 'watermarked_image_active', 'original_image'
    ]
    for key in state_keys:
        if key not in st.session_state:
            st.session_state[key] = None if 'image' in key or 'message' in key else False

def generate_key_stream(img_shape, secret_key: str):
    """GÃ¶rÃ¼ntÃ¼yÃ¼ ÅŸifrelemek/Ã§Ã¶zmek iÃ§in Keystream (Anahtar AkÄ±ÅŸÄ±) oluÅŸturur."""
    if not secret_key:
        secret_key = "default_seed" 
    # Hash ile tohum oluÅŸturma
    seed = int(hashlib.sha256(secret_key.encode('utf-8')).hexdigest(), 16) % (2**32 - 1)
    np.random.seed(seed)
    # Keystream oluÅŸturma
    key_stream = np.random.randint(0, 256, size=img_shape, dtype=np.uint8)
    return key_stream

def xor_image(img_bytes, key_stream):
    """GÃ¶rÃ¼ntÃ¼ verilerini Keystream ile XOR iÅŸlemine tabi tutar."""
    img_array = np.array(img_bytes, dtype=np.uint8)
    if img_array.shape != key_stream.shape:
        raise ValueError("Resim ve Anahtar AkÄ±ÅŸÄ± boyutlarÄ± eÅŸleÅŸmiyor!")

    encrypted_array = np.bitwise_xor(img_array, key_stream)
    return encrypted_array

# --- LED TABELA EFECTÄ° FONKSÄ°YONU (KaldÄ±) ---

def draw_led_display(img: Image.Image, hidden_message: str) -> Image.Image:
    """Åžifre Ã§Ã¶zÃ¼lmÃ¼ÅŸ gÃ¶rselin Ã¼zerine LED Tabela (Dot Matrix) efektiyle gizli mesajÄ± ekler."""
    img_copy = img.copy().convert("RGBA")
    w, h = img_copy.size
    
    if not hidden_message.strip():
        return img 

    # 1. Tabela AlanÄ±nÄ± Belirleme (Ãœst %25)
    panel_height = int(h * 0.25)
    panel_margin = 30
    panel_rect = [
        panel_margin,
        panel_margin,
        w - panel_margin,
        panel_height + panel_margin
    ]
    
    panel = Image.new('RGBA', img_copy.size, (0, 0, 0, 0))
    panel_draw = ImageDraw.Draw(panel)
    panel_draw.rectangle(panel_rect, fill=(20, 20, 20, 200)) # Koyu yarÄ± ÅŸeffaf arka plan
    
    # 2. MesajÄ± PikselleÅŸtirme ve Ã‡izme
    text_to_display = hidden_message.upper() 
    led_color = (255, 69, 0, 255) # Parlak Turuncu/KÄ±rmÄ±zÄ±
    led_radius = 2
    dot_spacing = 8
    
    try:
        font_size = 40
        font = ImageFont.load_default().font_variant(size=font_size) 
    except IOError:
        font_size = 30
        font = ImageFont.load_default()
        
    temp_draw = ImageDraw.Draw(Image.new('RGB', (1, 1)))
    try:
        bbox = temp_draw.textbbox((0, 0), text_to_display, font=font)
        text_w = bbox[2] - bbox[0]
        text_h = bbox[3] - bbox[1]
    except AttributeError:
        text_w = temp_draw.textlength(text_to_display, font=font)
        text_h = font_size
        
    start_x = panel_rect[0] + (panel_rect[2] - panel_rect[0] - text_w) // 2
    start_y = panel_rect[1] + (panel_height - text_h) // 2
    
    panel_draw.text((start_x, start_y), text_to_display, font=font, fill=(255, 255, 255, 255))
    
    # 3. PikselleÅŸtirme (LED Efekti)
    panel_pixels = panel.load()
    
    for y in range(panel_rect[1], panel_rect[3], dot_spacing):
        for x in range(panel_rect[0], panel_rect[2], dot_spacing):
            
            if x >= w or y >= h:
                continue
            
            r, g, b, a = panel_pixels[x, y]
            
            if r > 200 and a > 0:
                panel_draw.ellipse(
                    (x - led_radius, y - led_radius, x + led_radius, y + led_radius),
                    fill=led_color,
                    outline=None
                )
            else:
                panel_draw.ellipse(
                    (x - led_radius, y - led_radius, x + led_radius, y + led_radius),
                    fill=(50, 50, 50, 50),
                    outline=None
                )
                
    # 4. GÃ¶rÃ¼ntÃ¼leri BirleÅŸtirme
    img_copy.paste(panel, (0, 0), panel)
    
    return img_copy.convert("RGB")

# --- Ã–RNEK RESÄ°M OLUÅžTURMA FONKSÄ°YONU ---
def create_sample_image():
    """VarsayÄ±lan bir Ã¶rnek resim oluÅŸturur."""
    if 'original_image' not in st.session_state or st.session_state.original_image is None:
        try:
            img = Image.new('RGB', (600, 400), color = 'lightblue')
            d = ImageDraw.Draw(img)
            try:
                # PIL'de varsayÄ±lan fontu yÃ¼kle
                font = ImageFont.load_default().font_variant(size=40)
            except IOError:
                font = ImageFont.load_default()

            d.text((100, 180), "Ã–RNEK GÃ–RSEL", fill=(50, 50, 50), font=font)
            st.session_state.original_image = img
        except Exception as e:
            st.error(f"Ã–rnek gÃ¶rsel oluÅŸturulurken hata oluÅŸtu: {e}")
            st.session_state.original_image = None
    return st.session_state.original_image

# --- ANA UYGULAMA YAPISI ---

st.set_page_config(layout="centered", page_title="Gizli Mesaj Åžifreleyici")
initialize_session_state()

st.title("ðŸ”’ GÃ¶rsel Ãœzerinde Gizli Mesaj Åžifreleme")

tab_encrypt, tab_decrypt = st.tabs(["Åžifreleme (GÃ¶rseli Kilitle)", "Åžifre Ã‡Ã¶zme (MesajÄ± GÃ¶r)"])

# --- ÅžÄ°FRELEME SEKME Ä°Ã‡ERÄ°ÄžÄ° ---
with tab_encrypt:
    st.header("GÃ¶rseli Åžifrele")
    
    # --- Ã–rnek Resim OluÅŸturma Butonu ---
    if st.button("Ã–rnek Resim OluÅŸtur", key="create_sample_btn"):
        create_sample_image()
        
    uploaded_file = st.file_uploader("1. Åžifrelenecek GÃ¶rseli YÃ¼kle (.png, .jpg) VEYA Ã–rnek Kullan", type=["png", "jpg", "jpeg"])

    if uploaded_file:
        original_img = Image.open(uploaded_file).convert("RGB")
        st.session_state.original_image = original_img
    
    if st.session_state.original_image:
        st.image(st.session_state.original_image, caption="Orijinal GÃ¶rsel", use_column_width=True)
        
        with st.form("encryption_form"):
            
            # --- Sade Girdiler ---
            secret_key = st.text_input(
                "2. Åžifreleme AnahtarÄ± (Resim Åžifresi)", 
                help="GÃ¶rseli ÅŸifrelemek ve Ã§Ã¶zmek iÃ§in kullanÄ±lacak anahtar.", 
                value="my_secret_key"
            )
            
            hidden_message = st.text_area(
                "3. Gizli Mesaj (Ã‡Ã¶zÃ¼ldÃ¼ÄŸÃ¼nde LED Panelde GÃ¶rÃ¼nÃ¼r)", 
                max_chars=100,
                height=100,
                help="Åžifre Ã§Ã¶zÃ¼ldÃ¼kten sonra resmin Ã¼zerinde gÃ¶sterilecek mesaj."
            )
            
            encrypt_button = st.form_submit_button("GÃ¶rseli Åžifrele ve DosyalarÄ± OluÅŸtur", use_container_width=True)
        
        
        if encrypt_button:
            if not secret_key or not hidden_message:
                st.error("LÃ¼tfen Resim Åžifresini ve Gizli MesajÄ± girin.")
            else:
                st.info("Åžifreleme BaÅŸlatÄ±lÄ±yor...")
                
                original_img = st.session_state.original_image
                img_array = np.array(original_img)
                key_stream = generate_key_stream(img_array.shape, secret_key)
                encrypted_array = xor_image(img_array, key_stream)
                encrypted_img = Image.fromarray(encrypted_array)
                
                # PNG BaytlarÄ±
                png_bytes_io = io.BytesIO()
                encrypted_img.save(png_bytes_io, format='PNG')
                png_bytes = png_bytes_io.getvalue()
                
                # Orijinal Hash
                original_img_bytes = io.BytesIO()
                original_img.save(original_img_bytes, format='PNG')
                original_hash = hashlib.sha256(original_img_bytes.getvalue()).hexdigest()
                
                # Meta DosyasÄ± (Sadece hash ve mesaj iÃ§eriyor)
                meta_data = {
                    "original_hash": original_hash,
                    "hidden_message": hidden_message,
                    # Kilit zamanÄ± ve filigran ÅŸifresi kaldÄ±rÄ±ldÄ±.
                }
                meta_bytes = json.dumps(meta_data, indent=4).encode('utf-8')
                
                
                st.success("Åžifreleme TamamlandÄ±! LÃ¼tfen iki dosyayÄ± da indirin.")
                st.markdown("### ðŸ“¥ Ä°ndirilecek Dosyalar")
                
                st.download_button(
                    label="Åžifreli GÃ¶rsel Ä°ndir (.png)",
                    data=png_bytes,
                    file_name="encrypted_image.png",
                    mime="image/png",
                    use_
